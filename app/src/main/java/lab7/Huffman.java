/*
 * This source file was generated by the Gradle 'init' task
 */
package lab7;
import java.io.*;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;

import heap.Heap;
import java.util.*;

public class Huffman {
    static class Node implements Comparable<Node>{
        char character;
        int frequency;
        Node left;
        Node right;
        
        Node(char character, int frequency){
            this.character = character;
            this.frequency = frequency;
        }
        Node(Node left, Node right){
            this.left = left;
            this.right = right;
            this.frequency = left.frequency + right.frequency;
        }
        boolean isitALeaf(){
            if (left == null && right == null){
                return true;
            }
            return false;
        }
        public String toString(){
            return isitALeaf() ? "'" + character + "'" : "*";
        }
        public int compareTo(Node other){
            return Integer.compare(this.frequency, other.frequency);
        }
        private static void buildCodeMap(Node node, String path, Map<Character, String> map){
            if (node == null) return;
            if (node.isitALeaf()){
                map.put(node.character, path);
                return;
            }
            buildCodeMap(node.left, path + "0", map);
            buildCodeMap(node.right, path + "1", map);

        }
        static String encode(String input, Map<Character, String> codeMap){
            StringBuilder strb = new StringBuilder();
            for (char ch: input.toCharArray()){
                strb.append(codeMap.get(ch));
            }
            return strb.toString();
        }
        static String decode(String encodedString, Node root){
            StringBuilder resultString = new StringBuilder();
            Node currentNode = root;
            for (char bit : encodedString.toCharArray()){
                currentNode = (bit == '0') ? currentNode.left : currentNode.right;
                if (currentNode.isitALeaf()){
                    resultString.append(currentNode.character);
                    currentNode = root;
                }
            }
            return resultString.toString();
        }
        
        static Node buildTree(Map<Character, Integer> freqMap){
            Heap<Node, Integer> heap = new Heap<>();
            for (Map.Entry<Character, Integer> entry: freqMap.entrySet()){
                heap.add(new Node(entry.getKey(), entry.getValue()), entry.getValue());
            }
            if (heap.size() == 0){
                return null;
            }
            while (heap.size() > 1){
                Node left = heap.poll();
                Node right = heap.poll();
                heap.add(new Node(left, right), left.frequency + right.frequency);
            }
            return heap.poll();
        }
        static Map<Character, Integer> countFrequencies(String input){
            Map<Character, Integer> map = new HashMap<>();
            for (char character: input.toCharArray()){
                map.put(character, map.getOrDefault(character, 0) + 1);
            }
            return map;
        }
    }
    public static void main(String[] args) {
        if (args.length < 1){
            return;
        }
        String input = "";
        try{
            input = new String(Files.readAllBytes(Paths.get(args[0])));
        } catch (IOException e) {
            return;
        }

       
        Map<Character, Integer> freqMap = Node.countFrequencies(input);
        Node root = Node.buildTree(freqMap);
        if (root == null) return;
        Map<Character, String> codeMap = new HashMap<>();
        Node.buildCodeMap(root, "", codeMap);
        String encoded = Node.encode(input,codeMap);
        String decoded = Node.decode(encoded, root);
        if (input.length() < 100){
            System.out.println("Input string: " + input);
            System.out.println("Encoded string: " + encoded);
            System.out.println("Decoded string: " + decoded);
        }
        System.out.println("Decoded equals input: " + input.equals(decoded));
        double compressionRatio = (double) encoded.length() / (input.length() * 8.0);
        System.out.println("Compression ratio: " + compressionRatio);
    }
}
